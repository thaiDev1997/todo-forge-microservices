package com.example.config;

import com.example.aspect.AuthorizeAspect;
import com.example.service.SecurityService;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.security.oauth2.provider.token.TokenStore;
import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;
import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.stream.Collectors;

@SuppressWarnings("deprecation")
@Configuration
public class ResourceConfig {

    @ConditionalOnMissingBean(TokenStore.class)
    @Bean("tokenStoreResource")
    public TokenStore tokenStore() throws IOException {
        return new JwtTokenStore(accessTokenConverter());
    }

    @ConditionalOnMissingBean(JwtAccessTokenConverter.class)
    @Bean("accessTokenConverterResource")
    public JwtAccessTokenConverter accessTokenConverter() throws IOException {
        Resource resource = new ClassPathResource("todo-forge-public.txt"); // generated by openssl-for-windows google
        String publicKey = new BufferedReader(new InputStreamReader(resource.getInputStream())).lines()
                .collect(Collectors.joining("\n"));
        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
        converter.setVerifierKey(publicKey);
        return converter;
    }

    @Bean
    public AuthorizeAspect authorizeAspect(SecurityService securityService, Environment environment) {
        return new AuthorizeAspect(securityService, environment);
    }
}
